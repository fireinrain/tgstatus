// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

// Ref: #/components/schemas/Location
type Location struct {
	ID       int       `json:"id"`
	Services []Service `json:"services"`
}

// NewOptIP returns new OptIP with value set to v.
func NewOptIP(v net.IP) OptIP {
	return OptIP{
		Value: v,
		Set:   true,
	}
}

// OptIP is optional net.IP.
type OptIP struct {
	Value net.IP
	Set   bool
}

// IsSet returns true if OptIP was set.
func (o OptIP) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIP) Reset() {
	var v net.IP
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIP) SetTo(v net.IP) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIP) Get() (v net.IP, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Ref: #/components/schemas/Service
type Service struct {
	Status ServiceStatus `json:"status"`
	IPV4   OptIP         `json:"ip_v4"`
	IPV6   OptIP         `json:"ip_v6"`
}

type ServiceStatus string

const (
	ServiceStatusOnline  ServiceStatus = "Online"
	ServiceStatusOffline ServiceStatus = "Offline"
)

// Ref: #/components/schemas/Status
type Status struct {
	Locations []Location `json:"locations"`
}
